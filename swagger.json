{
    "swagger": "2.0",
    "info": {
        "description": "LightCone DEX function interpretation",
        "version": "1.0",
        "title": "LightCone 2.0 API Documentation",
        "termsOfService": "http://Loopring.com",
        "contact": {
            "name": "Loopring@Loopring.com"
        },
        "license": {
            "name": "license Loopring",
            "url": "https://loopring.org"
        }
    },
    "host": "uat2.loopring.io",
    "basePath": "/",
    "tags": [
        {
            "name": "Loopring DEX Restful API"
        },
        {
            "name": "HeBao Restful API"
        },
        {
            "name": "LightCone WebSocket API"
        }
    ],
    "paths": {
        "/api/v2/timestamp": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get relayer's current time",
                "description": "Returns the relayer's current time in millisecond",
                "operationId": "getTimestamp",
                "produces": ["application/json"],
                "parameters": [],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetTimestampV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/exchange/tokens": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get token configurations",
                "description": "Returns the configurations of all supported tokens, including Ether.",
                "operationId": "getTokens",
                "produces": ["application/json"],
                "parameters": [],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetTokenInfoResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/exchange/markets": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get market configurations",
                "description": "Returns the configurations of all supported markets (trading pairs)",
                "operationId": "getMarkets",
                "produces": ["application/json"],
                "parameters": [],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetMarketInfoResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/depth": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get market orderbook",
                "description": "Returns the order book of a given trading pair.",
                "operationId": "getDepth",
                "parameters": [
                    {
                        "name": "market",
                        "in": "query",
                        "description": "The id of a trading pair.",
                        "required": true,
                        "type": "string",
                        "x-example": "LRC-ETH"
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Order book aggregation level, larger value means further price aggregation.",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 2
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum numbers of bids/asks.",
                        "required": false,
                        "type": "integer",
                        "default": 50,
                        "format": "int32",
                        "x-example": 50
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetDepthResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "108000": {
                        "description": "Unsupported market"
                    },
                    "108001": {
                        "description": "Unsupported depth level"
                    }
                }
            }
        },
        "/api/v2/ticker": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get market ticker",
                "description": "Returns the ticker of a given trading pair.",
                "operationId": "getTicker",
                "parameters": [
                    {
                        "name": "market",
                        "in": "query",
                        "description": "Market pair, support multiple markets",
                        "required": true,
                        "type": "string",
                        "x-example": "LRC-ETH,LRC-USDT"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetTickerResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "100001": {
                        "description": "Invalid argument"
                    }
                }
            }
        },
        "/api/v2/price": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get token fiat prices",
                "description": "Returns the fiat prices of the given tokens",
                "operationId": "getPrice",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "legal",
                        "in": "query",
                        "description": "The fiat currency to uses. Currently the following values are supported: USD,CNY,JPY,EUR,GBP,HKD",
                        "required": true,
                        "type": "string",
                        "x-example": "USD"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetPriceV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/trade": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get market recent trades",
                "description": "Query trades with specified market",
                "operationId": "getMarketTrade",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "market",
                        "in": "query",
                        "description": "Single market to query",
                        "required": true,
                        "type": "string",
                        "x-example": "LRC-USDT"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of queries",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 20
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetMarketTradesV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/candlestick": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get market candlestick",
                "description": "Return the candlestick data of a given trading pair.",
                "operationId": "getCandlestick",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "market",
                        "in": "query",
                        "description": "Trading pair ID, multi-market is not supported",
                        "required": true,
                        "type": "string",
                        "x-example": "LRC-ETH"
                    },
                    {
                        "name": "interval",
                        "in": "query",
                        "description": "Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w",
                        "required": true,
                        "type": "string",
                        "x-example": "5min"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start time",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64",
                        "x-example": 1584479105000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End time",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64",
                        "x-example": 1584565505000
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of data points. If more data points are available, the API will only return the first 'limit' data points.",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 120
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetCandlestickResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "100001": {
                        "description": "Invalid argument"
                    }
                }
            }
        },
        "/api/v2/ethNonce": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user's next Ethereum nonce",
                "description": "Returns the next nonce of the Ethereum address associated with the user's account",
                "operationId": "getEthNonce",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Ethereum address",
                        "required": true,
                        "type": "string",
                        "x-example": "0x0000000000000000000000000000000000000000"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetEthNonceV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104205": {
                        "description": "Error in internal request"
                    },
                    "104208": {
                        "description": "Unknown error in Ethereum node"
                    }
                }
            }
        },
        "/api/v2/ethBalances": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user's Ether balance on Ethereum mainnet",
                "description": "Returns user's Ether balance on Ethereum mainnet (not the Ether balance on Loopring.io)",
                "operationId": "getEthBalance",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Ethereum address",
                        "required": true,
                        "type": "string",
                        "x-example": "0x0000000000000000000000000000000000000000"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetEthBalancesV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104205": {
                        "description": "Error in internal request"
                    },
                    "104208": {
                        "description": "Unknown error in Ethereum node"
                    }
                }
            }
        },
        "/api/v2/tokenBalances": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user token balance",
                "description": "Returns user's token balance on Ethereum mainnet (not token's balance on Loopring.io)",
                "operationId": "getTokenBalance",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Ethereum address",
                        "required": true,
                        "type": "string",
                        "x-example": "0x0000000000000000000000000000000000000000"
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Token's ERC20 address",
                        "required": true,
                        "type": "string",
                        "x-example": "0x0000000000000000000000000000000000000000"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetTokenBalancesV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104205": {
                        "description": "Error in internal request"
                    },
                    "104208": {
                        "description": "Unknown error in Ethereum node"
                    }
                }
            }
        },
        "/api/v2/allowances": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user token allowance",
                "description": "Returns the allowance of a given token that the user has authorized for Loopring.io",
                "operationId": "getAllowance",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Ethereum address",
                        "required": true,
                        "type": "string",
                        "x-example": "0x0000000000000000000000000000000000000000"
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "The token address to query",
                        "required": true,
                        "type": "string",
                        "x-example": "0x0000000000000000000000000000000000000000"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAllowancesV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104205": {
                        "description": "Error in internal request"
                    },
                    "104208": {
                        "description": "Unknown error in Ethereum node"
                    }
                }
            }
        },
        "/api/v2/recommendedGasPrice": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get recommended gas price",
                "description": "Get recommended gas price in Gwei.",
                "operationId": "getRecommendedGasPrice",
                "produces": ["application/json"],
                "parameters": [],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetRecommendedGasPriceResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "105001": {
                        "description": "Failed to get recommended gas"
                    }
                }
            }
        },
        "/api/v2/account": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Query user information",
                "description": "Returns data associated with the user's exchange account.",
                "operationId": "getAccount",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "owner",
                        "in": "query",
                        "description": "Ethereum address",
                        "required": true,
                        "type": "string",
                        "x-example": "0x123456"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAccountResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "101001": {
                        "description": "The address was not found"
                    },
                    "101002": {
                        "description": "User not found"
                    }
                }
            },
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.submitUpdateAccount.value",
                "description": "api.submitUpdateAccount.notes",
                "operationId": "submitUpdateAccount",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.submitUpdateAccount.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOffChainRequestResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102021": {
                        "description": "Nonce is invalid"
                    },
                    "102022": {
                        "description": "Transfer sender is invalid"
                    },
                    "102023": {
                        "description": "Transfer receiver is invalid"
                    },
                    "102024": {
                        "description": "Fee token is unsupported"
                    },
                    "102025": {
                        "description": "Transfer token isnt consistent with fee token"
                    }
                }
            }
        },
        "/api/v2/apiKey": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user ApiKey",
                "description": "Get the ApiKey associated with the user's account.",
                "operationId": "getApiKey",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "AccountID",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "x-example": 10
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetApiKeyResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "101002": {
                        "description": "User not found"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "104004": {
                        "description": "No signature information provided"
                    },
                    "104005": {
                        "description": "Wrong signature information"
                    }
                }
            },
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Update user's ApiKey",
                "description": "Change the ApiKey associated with the user's account. The current ApiKey must be provided as the value of the X-API-KEY HTTP header.",
                "operationId": "applyApiKey",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.applyApiKey.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetApiKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetApiKeyResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "100001": {
                        "description": "Invalid argument"
                    },
                    "101002": {
                        "description": "User not found"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "104004": {
                        "description": "No signature information provided"
                    },
                    "104005": {
                        "description": "Wrong signature information"
                    }
                }
            }
        },
        "/api/v2/storageId": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getNextStorageId.value",
                "description": "api.getNextStorageId.notes",
                "operationId": "getNextStorageId",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "request.getNextStorageId.accountId",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1
                    },
                    {
                        "name": "tokenSId",
                        "in": "query",
                        "description": "request.getNextStorageId.tokenSId",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 0
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetNextStorageIdResponseData"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    }
                }
            }
        },
        "/api/v3/order": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.submitOrderV3.value",
                "description": "api.submitOrderV3.notes",
                "operationId": "submitOrderV3",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.submitOrderV3.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SubmitOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOrderResponseV3"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102002": {
                        "description": "Unsupported TokenId in the order"
                    },
                    "102003": {
                        "description": "Invalid account ID"
                    },
                    "102004": {
                        "description": "Invalid order ID"
                    },
                    "102005": {
                        "description": "Market does not support"
                    },
                    "102006": {
                        "description": "Illegal rate field"
                    },
                    "102007": {
                        "description": "Order already exists"
                    },
                    "102008": {
                        "description": "Order has expired"
                    },
                    "102010": {
                        "description": "Order is missing signature information"
                    },
                    "102011": {
                        "description": "Insufficient user balance"
                    },
                    "102012": {
                        "description": "The order amount is too small"
                    },
                    "102014": {
                        "description": "Failed to freeze the amount, please try again later"
                    },
                    "102020": {
                        "description": "Exceeded the maximum order amount"
                    },
                    "102027": {
                        "description": "code.102027"
                    },
                    "102120": {
                        "description": "Order is not valid"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "104004": {
                        "description": "No signature information provided"
                    },
                    "104005": {
                        "description": "Wrong signature information"
                    }
                }
            }
        },
        "/api/v2/batchOrders": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Submit multiple orders",
                "description": "Submit up to 10 orders as a batch.",
                "operationId": "batchSubmitOrder",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body of batch submit orders.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BatchSubmitOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BatchSubmitOrderResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "100001": {
                        "description": "Invalid argument"
                    },
                    "104209": {
                        "description": "Partial batch operation failed"
                    }
                }
            }
        },
        "/api/v2/order": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get order details",
                "description": "Get the details of an order based on order hash.",
                "operationId": "getOrderDetail",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1
                    },
                    {
                        "name": "orderHash",
                        "in": "query",
                        "description": "Order hash",
                        "required": true,
                        "type": "string",
                        "x-example": "13375450901292179417154974849571793069911517354720397125027633242680470075859"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetOrderDetailResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    },
                    "107002": {
                        "description": "Order Hash cannot be empty"
                    },
                    "107003": {
                        "description": "Order does not exist"
                    }
                }
            }
        },
        "/api/v2/orders": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get multiple orders",
                "description": "Get a list of orders satisfying certain criteria.",
                "operationId": "getOrders",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "market",
                        "in": "query",
                        "description": "Trading pair",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "LRC-ETH"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Lower bound of order's creation timestamp in millisecond",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1567053142000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "Upper bound of order's creation timestamp in millisecond",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1567053242000
                    },
                    {
                        "name": "fromHash",
                        "in": "query",
                        "description": "Pagination of data to return records earlier than the requested hash",
                        "required": false,
                        "type": "string",
                        "default": "None ",
                        "x-example": "2600105125336468966417510367500403435128941502452005674156103328855968837178"
                    },
                    {
                        "name": "side",
                        "in": "query",
                        "description": "\"BUY\" or \"SELL\"",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": ["BUY", "SELL"],
                        "x-example": "BUY"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Order status. You can specify one of the following values:",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "processing",
                            "processed",
                            "failed",
                            "cancelled",
                            "cancelling",
                            "expired"
                        ],
                        "x-example": "processing,processed"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit of orders (default 50)",
                        "required": false,
                        "type": "integer",
                        "default": "None ",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Offset of orders (default 0)",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 0
                    },
                    {
                        "name": "orderTypes",
                        "in": "query",
                        "description": "request.getOrders.orderTypes",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "LIMIT_ORDER",
                            "MAKER_ONLY",
                            "TAKER_ONLY",
                            "AMM"
                        ],
                        "x-example": "LIMIT_ORDER"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetOrdersResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            },
            "delete": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Cancel orders",
                "description": "Cancel orders using order hash or client-side ID. If no parameters are provided, all pending all orders will be cancelled.",
                "operationId": "cancelOrders",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "x-example": 1
                    },
                    {
                        "name": "orderHash",
                        "in": "query",
                        "description": "Order HASH",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "13375450901292179417154974849571793069911517354720397125027633242680470075859"
                    },
                    {
                        "name": "clientOrderId",
                        "in": "query",
                        "description": "The unique order ID of the client",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "20200318000000001010"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/CancelOrdersResponseData"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102117": {
                        "description": "No orders to cancel"
                    },
                    "102118": {
                        "description": "Failed to cancel orders, please try again later"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    }
                }
            }
        },
        "/api/v2/orders/byHash": {
            "delete": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Cancel multiple orders by hash",
                "description": "Cancel up to 10 orders by order hash.",
                "operationId": "batchCancelOrdersByOrderHash",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "orderHash",
                        "in": "query",
                        "description": "Hash of order to be canceled,separate multiple hashes with commas.",
                        "required": true,
                        "type": "string",
                        "x-example": "13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BatchCancelOrderResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "100001": {
                        "description": "Invalid argument"
                    },
                    "104209": {
                        "description": "Partial batch operation failed"
                    }
                }
            }
        },
        "/api/v2/orders/byClientOrderId": {
            "delete": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Cancel multiple orders by clientOrderId",
                "description": "Cancel up to 10 orders by clientOrderId.",
                "operationId": "batchCancelOrdersByClientOrderId",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "clientOrderId",
                        "in": "query",
                        "description": "ClientOrderIds of orders to be cancelled.",
                        "required": true,
                        "type": "string",
                        "x-example": "20200318000000001010,20200318000000001011"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BatchCancelOrderResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "100001": {
                        "description": "Invalid argument"
                    },
                    "104209": {
                        "description": "Partial batch operation failed"
                    }
                }
            }
        },
        "/api/v2/sendEthTx": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Send a raw Ethereum transaction",
                "description": "Relay a raw Ethereum transaction to Ethereum mainnet.",
                "operationId": "sendTransaction",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body of send raw transaction",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ForwardEthTxRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ForwardEthTxResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104202": {
                        "description": "The current node service is not available"
                    },
                    "104205": {
                        "description": "Error in internal request"
                    },
                    "104208": {
                        "description": "Unknown error in Ethereum node"
                    }
                }
            }
        },
        "/api/v2/transfer": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Submit a transfer request",
                "description": "Submit a transfer request",
                "operationId": "submitTransfer",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Submit a transfer message body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OriginTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOffChainRequestResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102021": {
                        "description": "Nonce is invalid"
                    },
                    "102022": {
                        "description": "Transfer sender is invalid"
                    },
                    "102023": {
                        "description": "Transfer receiver is invalid"
                    },
                    "102024": {
                        "description": "Fee token is unsupported"
                    },
                    "102025": {
                        "description": "Transfer token isnt consistent with fee token"
                    }
                }
            }
        },
        "/api/v2/dualAuthTransfer": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.submitDualAuthTransfer.value",
                "description": "api.submitDualAuthTransfer.notes",
                "operationId": "submitDualAuthTransfer",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.submitDualAuthTransfer.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DualAuthTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOffChainRequestResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102021": {
                        "description": "Nonce is invalid"
                    },
                    "102022": {
                        "description": "Transfer sender is invalid"
                    },
                    "102023": {
                        "description": "Transfer receiver is invalid"
                    },
                    "102024": {
                        "description": "Fee token is unsupported"
                    },
                    "102025": {
                        "description": "Transfer token isnt consistent with fee token"
                    }
                }
            }
        },
        "/api/v2/reward": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "operationId": "submitReward",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "schema": {
                            "$ref": "#/definitions/ActionAnyContent"
                        }
                    }
                }
            }
        },
        "/api/v2/user/balances": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user exchange balances",
                "description": "Returns user's Ether and token balances on exchange.",
                "operationId": "getUserBalances",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "AccountID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "tokens",
                        "in": "query",
                        "description": "Balances",
                        "required": false,
                        "type": "string",
                        "x-example": "0,1"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserBalancesResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    }
                }
            }
        },
        "/api/v2/user/deposits": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user deposit history",
                "description": "Returns a list of deposit records for the given user.",
                "operationId": "getUserDeposits",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated status values",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "processing",
                            "processed",
                            "received",
                            "failed"
                        ],
                        "x-example": "processing,processed"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "tokenSymbol",
                        "in": "query",
                        "description": "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "ETH"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of records to skip",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserDepositResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        },
        "/api/v2/user/withdrawals": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user onchain withdrawal history",
                "description": "Get user onchain withdrawal history.",
                "operationId": "getUserWithdrawals",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated status values",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "processing",
                            "processed",
                            "received",
                            "failed"
                        ],
                        "x-example": "processing,processed"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "tokenSymbol",
                        "in": "query",
                        "description": "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "LRC"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of records to skip",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1
                    },
                    {
                        "name": "withdrawalTypes",
                        "in": "query",
                        "description": "request.getUserTxs.withdrawalTypes",
                        "required": false,
                        "type": "string",
                        "enum": ["force_withdrawal", "offchain_withdrawal"],
                        "x-example": "force_withdrawal"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserOnchainWithdrawalResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            },
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.submitOffChainWithdrawal.value",
                "description": "api.submitOffChainWithdrawal.notes",
                "operationId": "submitOffChainWithdrawal",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.submitOffChainWithdrawal.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OffChainWithdrawalRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOffChainRequestResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102021": {
                        "description": "Nonce is invalid"
                    },
                    "102022": {
                        "description": "Transfer sender is invalid"
                    },
                    "102023": {
                        "description": "Transfer receiver is invalid"
                    },
                    "102024": {
                        "description": "Fee token is unsupported"
                    },
                    "102025": {
                        "description": "Transfer token isnt consistent with fee token"
                    }
                }
            }
        },
        "/api/v2/user/transfers": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user transfer list",
                "description": "Get user transfer list.",
                "operationId": "getUserTransfers",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated status values",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "processing",
                            "processed",
                            "received",
                            "failed"
                        ],
                        "x-example": "processing,processed"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "tokenSymbol",
                        "in": "query",
                        "description": "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "LRC"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of records to skip",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1
                    },
                    {
                        "name": "transferTypes",
                        "in": "query",
                        "description": "request.getUserTxs.transferTypes",
                        "required": false,
                        "type": "string",
                        "x-example": "transfer, transfer_red"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserTransferResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        },
        "/api/v2/user/createInfo": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user registration transactions",
                "description": "Returns a list Ethereum transactions from users for exchange account registration.",
                "operationId": "getUserCreate",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated status values",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "processing",
                            "processed",
                            "received",
                            "failed"
                        ],
                        "x-example": "processing,processed"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "fromHash",
                        "in": "query",
                        "description": "Pagination of data to return records earlier than the requested hash",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of records to skip",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserCreateResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        },
        "/api/v2/user/updateInfo": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get password reset transactions",
                "description": "Returns a list Ethereum transactions from users for resetting exchange passwords.",
                "operationId": "getUserUpdate",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Start time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "End time in milliseconds",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1578558098000
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated status values",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": [
                            "processing",
                            "processed",
                            "received",
                            "failed"
                        ],
                        "x-example": "processing,processed"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "fromHash",
                        "in": "query",
                        "description": "Pagination of data to return records earlier than the requested hash",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of records to skip",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64",
                        "x-example": 1
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserAccountUpdateResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        },
        "/api/v2/user/trades": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get user trade history",
                "description": "Get user trade history.",
                "operationId": "getUserTrades",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "market",
                        "in": "query",
                        "description": "Trading pair",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "LRC-ETH"
                    },
                    {
                        "name": "orderHash",
                        "in": "query",
                        "description": "If a value is provided, only returns the trades associated with the given order",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "x-example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Number of records to skip",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of records to return",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32",
                        "x-example": 50
                    },
                    {
                        "name": "fromId",
                        "in": "query",
                        "description": "Pagination of data to return records earlier than the requested id",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64",
                        "x-example": 1
                    },
                    {
                        "name": "fillTypes",
                        "in": "query",
                        "description": "request.getUserTrades.fillTypes",
                        "required": false,
                        "type": "string",
                        "default": "None",
                        "enum": ["dex", "amm"],
                        "x-example": "dex"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserTradesResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    }
                }
            }
        },
        "/api/v2/user/feeRates": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Query user place order fee rate",
                "description": "Returns the fee rate of users placing orders in specific markets",
                "operationId": "getUserFeeRates",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "type": "integer",
                        "format": "int32",
                        "x-example": 1
                    },
                    {
                        "name": "markets",
                        "in": "query",
                        "description": "List of markets to be queried separated by \",\"",
                        "required": true,
                        "type": "string",
                        "x-example": "LRC-USDT,LRC-ETH"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetUserFeeRatesV2Response"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/user/bills": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "operationId": "getUserBill",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "billType",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64"
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "tokenId",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "income",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "default": "None"
                    },
                    {
                        "name": "transferAddress",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "schema": {
                            "$ref": "#/definitions/ActionAnyContent"
                        }
                    }
                }
            }
        },
        "/api/v2/crawl": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "operationId": "crawlSite",
                "parameters": [
                    {
                        "name": "site",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "schema": {
                            "$ref": "#/definitions/ActionAnyContent"
                        }
                    }
                }
            }
        },
        "/api/v2/exchange/info": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "Get exchange configurations",
                "description": "Return various configurations of Loopring.io",
                "operationId": "getExchangeInfo",
                "produces": ["application/json"],
                "parameters": [],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetExchangeInfoResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/exchange/withdrawalAgents": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getWithdrawalAgents.value",
                "description": "api.getWithdrawalAgents.notes",
                "operationId": "getWithdrawalAgents",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "tokenId",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetWithdrawalAgentsResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/verifyAllEcdsa": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "operationId": "verifyAllEcdsa",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "schema": {
                            "$ref": "#/definitions/ActionAnyContent"
                        }
                    }
                }
            }
        },
        "/v2/ws": {
            "get": {
                "tags": ["LightCone WebSocket API"],
                "operationId": "ws",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "schema": {
                            "$ref": "#/definitions/WebSocket"
                        }
                    }
                }
            }
        },
        "/api/v2/amm/markets": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getAmmMarkets.value",
                "description": "api.getAmmMarkets.notes",
                "operationId": "getAmmMarkets",
                "produces": ["application/json"],
                "parameters": [],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAmmMarketInfoResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/amm/snapshot": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getAmmSnapshot.value",
                "description": "api.getAmmSnapshot.notes",
                "operationId": "getAmmSnapshot",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "poolAddress",
                        "in": "query",
                        "description": "request.getAmmSnapshot.address",
                        "required": true,
                        "type": "string",
                        "x-example": "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAmmSnapshotResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    }
                }
            }
        },
        "/api/v2/amm/join": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.submitAmmJoin.value",
                "description": "api.submitAmmJoin.notes",
                "operationId": "submitAmmPoolJoin",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.AmmPoolJoinRequest.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOffChainRequestResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102021": {
                        "description": "Nonce is invalid"
                    },
                    "102022": {
                        "description": "Transfer sender is invalid"
                    },
                    "102023": {
                        "description": "Transfer receiver is invalid"
                    },
                    "102024": {
                        "description": "Fee token is unsupported"
                    },
                    "102025": {
                        "description": "Transfer token isnt consistent with fee token"
                    }
                }
            }
        },
        "/api/v2/amm/exit": {
            "post": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.submitAmmPoolExit.value",
                "description": "api.submitAmmPoolExit.notes",
                "operationId": "submitAmmPoolExit",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "api.submitAmmPoolExit.implicit.value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AmmPoolExitRequest"
                        }
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SubmitOffChainRequestResponse"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "102001": {
                        "description": "Exchange ID is incorrect"
                    },
                    "102021": {
                        "description": "Nonce is invalid"
                    },
                    "102022": {
                        "description": "Transfer sender is invalid"
                    },
                    "102023": {
                        "description": "Transfer receiver is invalid"
                    },
                    "102024": {
                        "description": "Fee token is unsupported"
                    },
                    "102025": {
                        "description": "Transfer token isnt consistent with fee token"
                    }
                }
            }
        },
        "/api/v2/amm/transactions": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getAmmTransactions.value",
                "description": "api.getAmmTransactions.notes",
                "operationId": "getAmmTransactions",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "poolAddress",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "billType",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64"
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "0L",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "format": "int32"
                    },
                    {
                        "name": "tokenId",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": -1,
                        "format": "int32"
                    },
                    {
                        "name": "income",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "default": "None"
                    },
                    {
                        "name": "transferAddress",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAmmTransactionResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        },
        "/api/v2/amm/user/transactions": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getAmmUserTransactions.value",
                "description": "api.getAmmUserTransactions.notes",
                "operationId": "getAmmUserTransactions",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64"
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64"
                    },
                    {
                        "name": "txTypes",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "default": "None"
                    },
                    {
                        "name": "txStatus",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "default": "None"
                    },
                    {
                        "name": "ammPoolAddress",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "default": "None"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAmmTransactionResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        },
        "/api/v2/amm/trades": {
            "get": {
                "tags": ["Loopring DEX Restful API"],
                "summary": "api.getAmmTrades.value",
                "description": "api.getAmmTrades.notes",
                "operationId": "getAmmTrades",
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "ammPoolAddress",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "default": "None",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "0": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/GetAmmTradesResponseV2"
                        }
                    },
                    "100000": {
                        "description": "Unknown error"
                    },
                    "104001": {
                        "description": "Empty ApiKey"
                    },
                    "104002": {
                        "description": "Invalid ApiKey"
                    },
                    "104003": {
                        "description": "Invalid Account ID"
                    },
                    "107001": {
                        "description": "User ID cannot be empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "GetTimestampV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1584683483382,
                    "description": "Current time in millisecond"
                }
            },
            "description": "Query the server's current time"
        },
        "ResultInfo": {
            "type": "object",
            "required": ["code", "message"],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The returned code"
                },
                "message": {
                    "type": "string",
                    "example": "SUCCESS",
                    "description": "The returned message"
                }
            },
            "description": "Information returned by the API"
        },
        "GetTokenInfoResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "Token list",
                    "items": {
                        "$ref": "#/definitions/TokenInfo"
                    }
                }
            },
            "description": "Tokens information supported by the exchange"
        },
        "TokenInfo": {
            "type": "object",
            "required": [
                "address",
                "decimals",
                "dustOrderAmount",
                "enabled",
                "fastWithdrawLimit",
                "maxOrderAmount",
                "minOrderAmount",
                "name",
                "precision",
                "symbol",
                "tokenId",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "example": "ERC20",
                    "description": "Token Type",
                    "enum": ["ERC20", "ETH"]
                },
                "tokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "Token's numeric id"
                },
                "symbol": {
                    "type": "string",
                    "example": "LRC",
                    "description": "Token symbol"
                },
                "name": {
                    "type": "string",
                    "example": "Loopring",
                    "description": "Token name"
                },
                "address": {
                    "type": "string",
                    "example": "0x97241525fe425C90eBe5A41127816dcFA5954b06",
                    "description": "Token ERC20 contract address"
                },
                "decimals": {
                    "type": "integer",
                    "format": "int32",
                    "example": 18,
                    "description": "Token decimals"
                },
                "precision": {
                    "type": "integer",
                    "format": "int32",
                    "example": 6,
                    "description": "Max decimals that relayer uses for the token, smaller amount will be treated as zero."
                },
                "minOrderAmount": {
                    "type": "string",
                    "example": "10000000000000000",
                    "description": "The minimum amount required for submitting orders."
                },
                "maxOrderAmount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "The maximum amount required for submitting orders."
                },
                "dustOrderAmount": {
                    "type": "string",
                    "example": "1000000000000000",
                    "description": "The dust order threshold amount."
                },
                "fastWithdrawLimit": {
                    "type": "string",
                    "example": "1000000000000000",
                    "description": "field.tokenInfo.fastWithdrawLimit"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether the token is currently enabled for deposits and withdrawals."
                }
            },
            "description": "Token Detail"
        },
        "GetMarketInfoResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "Markets list",
                    "items": {
                        "$ref": "#/definitions/MarketInfo"
                    }
                }
            },
            "description": "The result of query market configuration"
        },
        "MarketInfo": {
            "type": "object",
            "required": [
                "baseTokenId",
                "enabled",
                "market",
                "orderbookAggLevels",
                "precisionForPrice",
                "quoteTokenId"
            ],
            "properties": {
                "market": {
                    "type": "string",
                    "example": "LRC-USDT",
                    "description": "Trading pair ID"
                },
                "baseTokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "The base token ID"
                },
                "quoteTokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The quote token ID"
                },
                "precisionForPrice": {
                    "type": "integer",
                    "format": "int32",
                    "example": 6,
                    "description": "The precision of price"
                },
                "orderbookAggLevels": {
                    "type": "integer",
                    "format": "int32",
                    "example": 4,
                    "description": "The max level of orderbook price aggregation"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false,
                    "description": "True if trading is enabled for this trading pair"
                }
            }
        },
        "Depth": {
            "type": "object",
            "required": ["asks", "bids", "timestamp", "version"],
            "properties": {
                "version": {
                    "type": "integer",
                    "format": "int64",
                    "example": 147,
                    "description": "An ever-increasing numeric version number that reflects its change history."
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 432312312,
                    "description": "Update timestamp"
                },
                "bids": {
                    "type": "array",
                    "example": "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]",
                    "description": "Array of bids, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "asks": {
                    "type": "array",
                    "example": "[]",
                    "description": "Array of asks, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "description": "Order book info"
        },
        "GetDepthResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "Order book detail.",
                    "$ref": "#/definitions/Depth"
                }
            },
            "description": "response of querying order book"
        },
        "GetTickerResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "The returned message",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "example": "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]]",
                    "description": "Each item in the list is an array that contains the following: trading pair ID, update timestamp, base token volume, quote token volume, open-price, highest price, lowest price, closing price, number of trades, highest bid price, lowest ask price. All values are returned as strings.",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "description": "model.getTicker.description"
        },
        "GetPriceV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "The list of Price data",
                    "items": {
                        "$ref": "#/definitions/Price"
                    }
                }
            },
            "description": "The returned Query result of fiat currency price"
        },
        "Price": {
            "type": "object",
            "required": ["price", "symbol", "timestamp"],
            "properties": {
                "symbol": {
                    "type": "string",
                    "example": "LRC",
                    "description": "Token symbol"
                },
                "price": {
                    "type": "string",
                    "example": "0",
                    "description": "Fiat price"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0,
                    "description": "Last update timestamp"
                }
            },
            "description": "Token fiat price"
        },
        "GetMarketTradesV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "Market trades list",
                    "$ref": "#/definitions/MarketTrades"
                }
            },
            "description": "Query market trades returns"
        },
        "MarketTrades": {
            "type": "object",
            "required": ["totalNum", "trades"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0,
                    "description": "The total number of trades in query result"
                },
                "trades": {
                    "type": "array",
                    "example": "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]",
                    "description": "List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "description": "Market trades list"
        },
        "GetCandlestickResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "example": "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]",
                    "description": "Candlestick data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "description": "The response of query Candlestick data"
        },
        "GetEthNonceV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0,
                    "description": "The result of nonce"
                }
            },
            "description": "Query the result returned by Ethereum address nonce"
        },
        "GetEthBalancesV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "Balance in wei"
                }
            },
            "description": "The query result of Ethereum address ETH balance"
        },
        "GetTokenBalancesV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "example": "['1000000000000000000']",
                    "description": "Balance in wei",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "The query result of Ethereum address token balances"
        },
        "GetAllowancesV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "example": "['0']",
                    "description": "Allowance amount in wei",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "Query the allowance return of the Ethereum address on the exchange"
        },
        "GetRecommendedGasPriceResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "string",
                    "example": "10000000000",
                    "description": "Response value of current recommended gas price in Gwei"
                }
            },
            "description": "Response body"
        },
        "DexAccount": {
            "type": "object",
            "required": [
                "accountId",
                "accountNonce",
                "frozen",
                "keyNonce",
                "owner",
                "publicKeyX",
                "publicKeyY"
            ],
            "properties": {
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10,
                    "description": "Account ID"
                },
                "owner": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.dexAccount.owner"
                },
                "frozen": {
                    "type": "boolean",
                    "example": false,
                    "description": "The frozen state of the account, true stands for frozen, if the account is frozen, the user cant submit order."
                },
                "publicKeyX": {
                    "type": "string",
                    "example": "123",
                    "description": "The first part of user's public key"
                },
                "publicKeyY": {
                    "type": "string",
                    "example": "456",
                    "description": "The second part of user's public key"
                },
                "tags": {
                    "type": "string",
                    "example": "vip_1",
                    "description": "Comma separated list of tags such as VIP levels, etc"
                },
                "keyNonce": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0,
                    "description": "Nonce to generate exchange EDDSA private key."
                },
                "accountNonce": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0,
                    "description": "Nonce of users exchange account that used in off-chain requests."
                }
            },
            "description": "DexAccount data"
        },
        "GetAccountResponseV2": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "example": "0",
                    "description": "DexAccount data",
                    "$ref": "#/definitions/DexAccount"
                }
            },
            "description": "model.getAccountResponse"
        },
        "SubmitOffChainRequestItem": {
            "type": "object",
            "required": ["hash", "isIdempotent", "status"],
            "properties": {
                "hash": {
                    "type": "string",
                    "example": "0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3",
                    "description": "field.submitOffChainRequest.hash"
                },
                "status": {
                    "type": "string",
                    "example": "received",
                    "description": "field.submitOffChainRequest.status",
                    "enum": ["received", "processing", "processed", "failed"]
                },
                "isIdempotent": {
                    "type": "boolean",
                    "example": true,
                    "description": "field.submitOffChainRequest.isIdempotent",
                    "enum": [true, false]
                }
            },
            "description": "model.submitOffChainRequest.description"
        },
        "SubmitOffChainRequestResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "field.submitOffChainRequest.data",
                    "$ref": "#/definitions/SubmitOffChainRequestItem"
                }
            },
            "description": "model.submitOffChainRequest.response"
        },
        "UpdateAccountRequest": {
            "type": "object",
            "required": [
                "accountId",
                "exchange",
                "feeToken",
                "maxFeeAmount",
                "nonce",
                "owner",
                "publicKeyX",
                "publicKeyY",
                "validUntil"
            ],
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "1",
                    "description": "field.UpdateAccountRequest.exchange"
                },
                "owner": {
                    "type": "string",
                    "example": "0xB4A70168340C75119523019f79F5Ffd9c60DceC7",
                    "description": "field.UpdateAccountRequest.owner"
                },
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.UpdateAccountRequest.accountId"
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1583183141,
                    "description": "field.UpdateAccountRequest.validUntil"
                },
                "nonce": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.UpdateAccountRequest.nonce"
                },
                "publicKeyX": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.UpdateAccountRequest.publicKeyX"
                },
                "publicKeyY": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.UpdateAccountRequest.publicKeyY"
                },
                "feeToken": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.UpdateAccountRequest.feeTokenId"
                },
                "maxFeeAmount": {
                    "type": "string",
                    "example": "1234",
                    "description": "field.UpdateAccountRequest.maxFee"
                },
                "eddsaSig": {
                    "type": "string",
                    "example": "0xX..{64}..XY..{64}..YZ..{64}..Z",
                    "description": "field.UpdateAccountRequest.eddsaSig"
                },
                "ecdsaSig": {
                    "type": "string",
                    "example": "0x41853ea3..{130}..e6b32982bfc61c",
                    "description": "field.UpdateAccountRequest.ecdsaSig"
                }
            },
            "description": "model.UpdateAccountRequest.description"
        },
        "GetApiKeyResponseV2": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "string",
                    "example": "6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt",
                    "description": "ApiKey"
                }
            },
            "description": "The Response of updating user's ApiKey"
        },
        "GetApiKeyRequest": {
            "type": "object",
            "required": ["accountId"],
            "properties": {
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "AccountID"
                }
            },
            "description": "model.applyApiKey.description"
        },
        "GetNextStorageIdResponseData": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "field.GetNextStorageIdResponseData.data",
                    "$ref": "#/definitions/NextStorageIdResponse"
                }
            },
            "description": "model.GetNextStorageIdResponseData.description"
        },
        "NextStorageIdResponse": {
            "type": "object",
            "properties": {
                "orderId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100,
                    "description": "field.NextStorageIdResponse.orderId"
                },
                "offchainId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 101,
                    "description": "field.NextStorageIdResponse.offchainId"
                }
            },
            "description": "{{model.NextStorageIdResponse.description}"
        },
        "SubmitOrderResponseV3": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "field.SubmitOrderResponseV3.data",
                    "$ref": "#/definitions/SubmitOrderResponseV3Item"
                }
            },
            "description": "model.SubmitOrderResponseV3.description"
        },
        "SubmitOrderResponseV3Item": {
            "type": "object",
            "required": ["isIdempotent", "orderHash", "status"],
            "properties": {
                "orderHash": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "field.SubmitOrderResponseV3Item.orderHash"
                },
                "status": {
                    "type": "string",
                    "example": "cancelled",
                    "description": "field.SubmitOrderResponseV3Item.status",
                    "enum": [
                        "processing",
                        "processed",
                        "cancelling",
                        "cancelled",
                        "expired",
                        "failed"
                    ]
                },
                "isIdempotent": {
                    "type": "boolean",
                    "example": true,
                    "description": "field.SubmitOrderResponseV3Item.isIdempotent",
                    "enum": [true, false]
                }
            },
            "description": "model.SubmitOrderResponseV3Item.description"
        },
        "SubmitOrderRequest": {
            "type": "object",
            "required": [
                "accountId",
                "amountB",
                "amountS",
                "eddsaSig",
                "exchange",
                "fillAmountBOrS",
                "maxFeeBips",
                "storageId",
                "tokenBId",
                "tokenSId",
                "validUntil"
            ],
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "1",
                    "description": "field.SubmitOrderRequest.exchange"
                },
                "storageId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.SubmitOrderRequest.storageId"
                },
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Account ID"
                },
                "tokenSId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "The ID of the token to be sold"
                },
                "tokenBId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 2,
                    "description": "The ID of the token to be bought"
                },
                "amountS": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "Number of tokens to be sold"
                },
                "amountB": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "Number of tokens to be bought"
                },
                "allOrNone": {
                    "type": "string",
                    "example": "false",
                    "description": "Whether the order can only be filled completely or 0 deals, currently only supports false"
                },
                "fillAmountBOrS": {
                    "type": "string",
                    "example": "true",
                    "description": "field.SubmitOrderRequest.fillAmountBOrS"
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1567053142,
                    "description": "Order expiration time, accuracy is in seconds"
                },
                "maxFeeBips": {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63"
                },
                "eddsaSig": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "field.SubmitOrderRequest.eddsaSig"
                },
                "clientOrderId": {
                    "type": "string",
                    "example": "1",
                    "description": "The unique order ID of the client"
                },
                "channelId": {
                    "type": "string",
                    "example": "hebao::subchannel::0001",
                    "description": "Order channel ID, used to indicate from which channel the order was submitted"
                },
                "orderType": {
                    "type": "string",
                    "example": "LIMIT_ORDER",
                    "description": "field.SubmitOrderRequest.orderType",
                    "enum": ["LIMIT_ORDER", "TAKER_ONLY", "MAKER_ONLY", "AMM"]
                },
                "taker": {
                    "type": "string",
                    "example": "0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18",
                    "description": "field.SubmitOrderRequest.taker"
                },
                "poolAddress": {
                    "type": "string",
                    "example": "0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18",
                    "description": "field.SubmitOrderRequest.taker"
                }
            },
            "description": "Submit order request description"
        },
        "BatchSubmitOrderResponse": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "Result of batch submit orders.",
                    "items": {
                        "$ref": "#/definitions/SubmitOrderResult"
                    }
                }
            },
            "description": "Batch submit orders."
        },
        "SubmitOrderResult": {
            "type": "object",
            "required": ["hash"],
            "properties": {
                "hash": {
                    "type": "string",
                    "example": "0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf",
                    "description": "Hash of order submitted"
                },
                "error": {
                    "description": "Error for order submission failure.",
                    "$ref": "#/definitions/ResultInfo"
                }
            },
            "description": "Single order submission results."
        },
        "BatchSubmitOrderRequest": {
            "type": "object",
            "required": ["orders"],
            "properties": {
                "orders": {
                    "type": "array",
                    "description": "Orders to submit.",
                    "items": {
                        "$ref": "#/definitions/SubmitOrderRequest"
                    }
                }
            },
            "description": "Batch submit order parameters."
        },
        "GetOrderDetailResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "Response details of order",
                    "$ref": "#/definitions/OrderDetail"
                }
            },
            "description": "Response body"
        },
        "OrderDetail": {
            "type": "object",
            "required": [
                "clientOrderId",
                "createdAt",
                "filledFee",
                "filledSize",
                "filledVolume",
                "hash",
                "market",
                "orderType",
                "price",
                "side",
                "size",
                "status",
                "validUntil",
                "volume"
            ],
            "properties": {
                "hash": {
                    "type": "string",
                    "example": "0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf",
                    "description": "Order hash"
                },
                "clientOrderId": {
                    "type": "string",
                    "example": "200310143135081332",
                    "description": "Order's client-side id"
                },
                "size": {
                    "type": "string",
                    "example": "8210000000000001024",
                    "description": "Order size, as wei in base token"
                },
                "volume": {
                    "type": "string",
                    "example": "163182534700000032",
                    "description": "Order volume, as wei in quote token"
                },
                "price": {
                    "type": "string",
                    "example": "0.01987608",
                    "description": "Order price"
                },
                "filledSize": {
                    "type": "string",
                    "example": "0",
                    "description": "Filled size, as wei in base token"
                },
                "filledVolume": {
                    "type": "string",
                    "example": "0",
                    "description": "Filled volume, as wei in quote token"
                },
                "filledFee": {
                    "type": "string",
                    "example": "0",
                    "description": "Fees charged"
                },
                "status": {
                    "type": "string",
                    "example": "processing",
                    "description": "Order status",
                    "enum": [
                        "processing",
                        "processed",
                        "cancelling",
                        "cancelled",
                        "expired",
                        "waiting"
                    ]
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1586521591,
                    "description": "Timestamp for order to become invalid"
                },
                "createdAt": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1583933191494,
                    "description": "Order creation timestamp"
                },
                "side": {
                    "type": "string",
                    "example": "SELL",
                    "description": "Order's side",
                    "enum": ["SELL", "BUY"]
                },
                "market": {
                    "type": "string",
                    "example": "LRC-ETH",
                    "description": "Trading pair"
                },
                "orderType": {
                    "type": "string",
                    "example": "LIMIT_ORDER",
                    "description": "field.OrderDetail.orderType",
                    "enum": ["LIMIT_ORDER", "TAKER_ONLY", "MAKER_ONLY"]
                }
            },
            "description": "Response details of order"
        },
        "CancelOrdersResponseData": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "boolean",
                    "example": true,
                    "description": "Cancel orders response"
                }
            }
        },
        "BatchCancelOrderResponse": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "Results of batch order cancellation.",
                    "items": {
                        "$ref": "#/definitions/CancelOrderResult"
                    }
                }
            },
            "description": "Batch cancel orders."
        },
        "CancelOrderResult": {
            "type": "object",
            "required": ["id", "result"],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "Hash or clientOrderId of order cancelled."
                },
                "result": {
                    "type": "boolean",
                    "example": true,
                    "description": "Order cancellation result."
                },
                "error": {
                    "description": "Error for cancel order failure.",
                    "$ref": "#/definitions/ResultInfo"
                }
            },
            "description": "result for order cancellation."
        },
        "GetOrdersResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "Response orders",
                    "$ref": "#/definitions/OrdersDetail"
                }
            },
            "description": "Response body"
        },
        "OrdersDetail": {
            "type": "object",
            "required": ["totalNum"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10,
                    "description": "Total number of orders"
                },
                "orders": {
                    "type": "array",
                    "description": "List of order",
                    "items": {
                        "$ref": "#/definitions/OrderDetail"
                    }
                }
            },
            "description": "Response orders"
        },
        "ForwardEthTxResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "string",
                    "example": "0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886",
                    "description": "Transaction hash"
                }
            },
            "description": "Response of sending raw transaction"
        },
        "ForwardEthTxRequest": {
            "type": "object",
            "required": ["data"],
            "properties": {
                "data": {
                    "type": "string",
                    "example": "0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2",
                    "description": "Serialized Ethereum signature transaction as hexadecimal string"
                }
            },
            "description": "Send a raw Ethereum transaction"
        },
        "OriginTransferRequest": {
            "type": "object",
            "required": [
                "amount",
                "exchange",
                "feeToken",
                "maxFeeAmount",
                "payeeAddr",
                "payeeId",
                "payerAddr",
                "payerId",
                "storageId",
                "token",
                "validUntil"
            ],
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "1",
                    "description": "field.SubmitOriginTransferRequest.exchange"
                },
                "payerId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.SubmitOriginTransferRequest.payerId"
                },
                "payerAddr": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.SubmitOriginTransferRequest.payerAddr"
                },
                "payeeId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.SubmitOriginTransferRequest.payeeId"
                },
                "payeeAddr": {
                    "type": "string",
                    "example": "0xCDEF",
                    "description": "field.SubmitOriginTransferRequest.payeeAddr"
                },
                "token": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.SubmitOriginTransferRequest.token"
                },
                "amount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "field.SubmitOriginTransferRequest.amount"
                },
                "feeToken": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.SubmitOriginTransferRequest.feeToken"
                },
                "maxFeeAmount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "field.SubmitOriginTransferRequest.maxFeeAmount"
                },
                "storageId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.SubmitOriginTransferRequest.storageId"
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1598431481,
                    "description": "field.SubmitOriginTransferRequest.validUntil"
                },
                "eddsaSig": {
                    "type": "string",
                    "example": "0xX..{64}..XY..{64}..YZ..{64}..Z",
                    "description": "field.SubmitOriginTransferRequest.eddsaSig"
                },
                "ecdsaSig": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "field.SubmitOriginTransferRequest.ecdsaSig"
                },
                "memo": {
                    "type": "string",
                    "example": "Air Drop",
                    "description": "field.SubmitOriginTransferRequest.memo"
                }
            },
            "description": "model.SubmitOriginTransferRequest.description"
        },
        "DualAuthTransferRequest": {
            "type": "object",
            "required": [
                "amount",
                "dualAuthKeyX",
                "dualAuthKeyY",
                "dualEddsaSig",
                "dualPayeeAddr",
                "dualPayeeId",
                "eddsaSig",
                "exchange",
                "feeToken",
                "maxFeeAmount",
                "payerAddr",
                "payerId",
                "storageId",
                "token",
                "validUntil"
            ],
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.SubmitDualAuthTransferRequest.exchange"
                },
                "payerId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.SubmitDualAuthTransferRequest.payerId"
                },
                "payerAddr": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.SubmitDualAuthTransferRequest.payerAddr"
                },
                "token": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.SubmitDualAuthTransferRequest.token"
                },
                "amount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "field.SubmitDualAuthTransferRequest.amount"
                },
                "feeToken": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.SubmitDualAuthTransferRequest.feeToken"
                },
                "maxFeeAmount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "field.SubmitDualAuthTransferRequest.maxFeeAmount"
                },
                "storageId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.SubmitDualAuthTransferRequest.storageId"
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1598431481,
                    "description": "field.SubmitDualAuthTransferRequest.validUntil"
                },
                "eddsaSig": {
                    "type": "string",
                    "example": "0xX..{64}..XY..{64}..YZ..{64}..Z",
                    "description": "field.SubmitDualAuthTransferRequest.eddsaSig"
                },
                "dualAuthKeyX": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "field.SubmitDualAuthTransferRequest.dualAuthKeyX"
                },
                "dualAuthKeyY": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "field.SubmitDualAuthTransferRequest.dualAuthKeyY"
                },
                "dualEddsaSig": {
                    "type": "string",
                    "example": "0xX..{64}..XY..{64}..YZ..{64}..Z",
                    "description": "field.SubmitDualAuthTransferRequest.dualEddsaSig"
                },
                "dualPayeeId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.SubmitDualAuthTransferRequest.dualPayeeId"
                },
                "dualPayeeAddr": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.SubmitDualAuthTransferRequest.dualPayeeAddr"
                },
                "memo": {
                    "type": "string",
                    "example": "Air Drop",
                    "description": "field.SubmitDualAuthTransferRequest.memo"
                }
            },
            "description": "model.SubmitDualAuthTransferRequest.description"
        },
        "Action": {
            "type": "object"
        },
        "ActionAnyContent": {
            "type": "object"
        },
        "Balance": {
            "type": "object",
            "required": ["accountId", "amountLocked", "tokenId", "totalAmount"],
            "properties": {
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10,
                    "description": "Account ID"
                },
                "tokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10,
                    "description": "Token ID"
                },
                "totalAmount": {
                    "type": "string",
                    "example": "100",
                    "description": "Amount of the asset"
                },
                "amountLocked": {
                    "type": "string",
                    "example": "100",
                    "description": "Balance that has been locked by orders or pending withdrawals on exchange"
                }
            },
            "description": "Asset information"
        },
        "GetUserBalancesResponseV2": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "Asset information",
                    "items": {
                        "$ref": "#/definitions/Balance"
                    }
                }
            },
            "description": "The response of querying user's exchange balance"
        },
        "DepositData": {
            "type": "object",
            "required": [
                "amount",
                "blockNum",
                "hash",
                "id",
                "progress",
                "status",
                "symbol",
                "timestamp",
                "txHash",
                "updatedAt"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Unique id"
                },
                "hash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "field.TxData.hash"
                },
                "symbol": {
                    "type": "string",
                    "example": "LRC",
                    "description": "Token symbol"
                },
                "amount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "Amount requested by the user"
                },
                "txHash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "Transaction hash"
                },
                "status": {
                    "type": "string",
                    "example": "processing",
                    "description": "Current status",
                    "enum": ["processing", "processed", "received", "failed"]
                },
                "progress": {
                    "type": "string",
                    "example": "100%",
                    "description": "Progress"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Create time"
                },
                "blockNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100,
                    "description": "Block height"
                },
                "updatedAt": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Update time"
                }
            },
            "description": "Response data"
        },
        "DepositDataList": {
            "type": "object",
            "required": ["totalNum", "transactions"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Total number of records found"
                },
                "transactions": {
                    "type": "array",
                    "description": "List of DepositRecord",
                    "items": {
                        "$ref": "#/definitions/DepositData"
                    }
                }
            },
            "description": "DepositDataList"
        },
        "GetUserDepositResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "TxDataList",
                    "$ref": "#/definitions/DepositDataList"
                }
            },
            "description": "Response body"
        },
        "GetUserOnchainWithdrawalResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "TxDataList",
                    "$ref": "#/definitions/OnchainWithdrawalDataList"
                }
            },
            "description": "Response body"
        },
        "OnchainWithdrawalDataList": {
            "type": "object",
            "required": ["totalNum", "transactions"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Total number of records found"
                },
                "transactions": {
                    "type": "array",
                    "description": "List of OnchainWithdrawalRecord",
                    "items": {
                        "$ref": "#/definitions/WithdrawalData"
                    }
                }
            },
            "description": "OnchainWithdrawalDataList"
        },
        "WithdrawalData": {
            "type": "object",
            "required": [
                "amount",
                "blockNum",
                "distributeHash",
                "feeAmount",
                "hash",
                "id",
                "progress",
                "status",
                "symbol",
                "timestamp",
                "txHash",
                "txType",
                "updatedAt"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Unique id"
                },
                "txType": {
                    "type": "string",
                    "example": "FORCE_WITHDRAWAL",
                    "description": "User transaction type"
                },
                "hash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "field.TxData.hash"
                },
                "symbol": {
                    "type": "string",
                    "example": "LRC",
                    "description": "Token symbol"
                },
                "amount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "Amount requested by the user"
                },
                "txHash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "Transaction hash"
                },
                "feeAmount": {
                    "type": "string",
                    "example": "1000000000000000",
                    "description": "Fee amount in wei"
                },
                "status": {
                    "type": "string",
                    "example": "processing",
                    "description": "Current status",
                    "enum": ["processing", "processed", "received", "failed"]
                },
                "progress": {
                    "type": "string",
                    "example": "100%",
                    "description": "Progress"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Create time"
                },
                "blockNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100,
                    "description": "Block height"
                },
                "updatedAt": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Update time"
                },
                "distributeHash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "Distribute Hash"
                },
                "requestId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "withdrawal ID"
                },
                "fastStatus": {
                    "type": "string",
                    "example": "EMPTY",
                    "description": "field.TxData.fastStatus",
                    "enum": ["EMPTY", "PROCEEING", "SUCCESSED", "FAILED"]
                }
            },
            "description": "Response data"
        },
        "GetUserTransferResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "TxDataList",
                    "$ref": "#/definitions/TransferDataList"
                }
            },
            "description": "Response body"
        },
        "TransferData": {
            "type": "object",
            "required": [
                "amount",
                "feeAmount",
                "hash",
                "id",
                "progress",
                "status",
                "symbol",
                "timestamp",
                "txType",
                "updatedAt"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Unique id"
                },
                "hash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "field.TxData.hash"
                },
                "txType": {
                    "type": "string",
                    "example": "transfer",
                    "description": "User transaction type"
                },
                "symbol": {
                    "type": "string",
                    "example": "LRC",
                    "description": "Token symbol"
                },
                "amount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "Amount requested by the user"
                },
                "senderAddress": {
                    "type": "string",
                    "example": "0x0306b9d5c9Ed358FC7b77780bACD15398D242f26",
                    "description": "Sender Ethereum Address"
                },
                "receiver": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Receiver id"
                },
                "receiverAddress": {
                    "type": "string",
                    "example": "0x0306b9d5c9Ed358FC7b77780bACD15398D242f26",
                    "description": "Recipient Ethereum Address"
                },
                "feeAmount": {
                    "type": "string",
                    "example": "1000000000000000",
                    "description": "Fee amount in wei"
                },
                "status": {
                    "type": "string",
                    "example": "processing",
                    "description": "Current status",
                    "enum": ["processing", "processed", "received", "failed"]
                },
                "progress": {
                    "type": "string",
                    "example": "100%",
                    "description": "Progress"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Create time"
                },
                "updatedAt": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Update time"
                },
                "memo": {
                    "type": "string",
                    "example": "Air Drop",
                    "description": "Memo"
                }
            }
        },
        "TransferDataList": {
            "type": "object",
            "required": ["totalNum", "transactions"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Total number of records found"
                },
                "transactions": {
                    "type": "array",
                    "description": "List of Transfer record",
                    "items": {
                        "$ref": "#/definitions/TransferData"
                    }
                }
            },
            "description": "Transfer Data List"
        },
        "OffChainWithdrawalRequest": {
            "type": "object",
            "required": [
                "accountId",
                "amount",
                "exchange",
                "feeToken",
                "maxFeeAmount",
                "minGas",
                "owner",
                "storageId",
                "to",
                "token",
                "validUntil"
            ],
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "1",
                    "description": "exchange address"
                },
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "account id in exchange"
                },
                "owner": {
                    "type": "string",
                    "example": "1",
                    "description": "owner of accountId in exchange"
                },
                "token": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "withdraw token id"
                },
                "amount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "withdraw amount of token, decimal string in WEI"
                },
                "feeToken": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "fee token id in exchange"
                },
                "maxFeeAmount": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "fee amount of token, decimal string in WEI"
                },
                "storageId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "dex offchain request storageID of the account"
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1519217383,
                    "description": "valid until"
                },
                "minGas": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1519217383,
                    "description": "min gas"
                },
                "to": {
                    "type": "string",
                    "example": "0x12345678",
                    "description": "to address"
                },
                "extraData": {
                    "type": "string",
                    "example": "0xABCD1234",
                    "description": "extra data"
                },
                "fastWithdrawalMode": {
                    "type": "boolean",
                    "example": false,
                    "description": "fastWithdrawal mode"
                },
                "eddsaSig": {
                    "type": "string",
                    "example": "0xX..{64}..XY..{64}..YZ..{64}..Z",
                    "description": "eddsaSig of this request, hex string"
                },
                "ecdsaSig": {
                    "type": "string",
                    "example": "13375450901292179417154974849571793069911517354720397125027633242680470075859",
                    "description": "trading ecdsa_sig signature of this order, decimal string"
                }
            }
        },
        "GetUserCreateResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "TxDataList",
                    "$ref": "#/definitions/UserCreateDataList"
                }
            },
            "description": "Response body"
        },
        "UserAccountTxData": {
            "type": "object",
            "required": [
                "blockNum",
                "feeAmount",
                "hash",
                "id",
                "owner",
                "progress",
                "status",
                "timestamp",
                "txHash",
                "updatedAt"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Unique id"
                },
                "hash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "field.TxData.hash"
                },
                "owner": {
                    "type": "string",
                    "example": "0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee",
                    "description": "field.TxData.owner"
                },
                "txHash": {
                    "type": "string",
                    "example": "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
                    "description": "Transaction hash"
                },
                "feeAmount": {
                    "type": "string",
                    "example": "1000000000000000",
                    "description": "Fee amount in wei"
                },
                "status": {
                    "type": "string",
                    "example": "processing",
                    "description": "Current status",
                    "enum": ["processing", "processed", "received", "failed"]
                },
                "progress": {
                    "type": "string",
                    "example": "100%",
                    "description": "Progress"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Create time"
                },
                "blockNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100,
                    "description": "Block height"
                },
                "updatedAt": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1578572292000,
                    "description": "Update time"
                }
            },
            "description": "Response data"
        },
        "UserCreateDataList": {
            "type": "object",
            "required": ["totalNum", "transactions"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Total number of records found"
                },
                "transactions": {
                    "type": "array",
                    "description": "List of UserRegistrationRecord",
                    "items": {
                        "$ref": "#/definitions/UserAccountTxData"
                    }
                }
            },
            "description": "UserCreateDataList"
        },
        "GetUserAccountUpdateResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "TxDataList",
                    "$ref": "#/definitions/UserAccountUpdateDataList"
                }
            },
            "description": "Response body"
        },
        "UserAccountUpdateDataList": {
            "type": "object",
            "required": ["totalNum", "transactions"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "Total number of records found"
                },
                "transactions": {
                    "type": "array",
                    "description": "List of UserPasswordChangeRecord",
                    "items": {
                        "$ref": "#/definitions/UserAccountTxData"
                    }
                }
            },
            "description": "UserChangePasswordDataList"
        },
        "GetUserTradesResponseV2": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "A list of trades",
                    "$ref": "#/definitions/TradeList"
                }
            },
            "description": "Response body"
        },
        "TradeList": {
            "type": "object",
            "required": ["totalNum", "trades"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100,
                    "description": "Total number of tradings"
                },
                "trades": {
                    "type": "array",
                    "example": "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]",
                    "description": "List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "description": "A list of trades"
        },
        "FeeRate": {
            "type": "object",
            "required": ["makerRate", "symbol", "takerRate"],
            "properties": {
                "symbol": {
                    "type": "string",
                    "example": "LRC-USDT",
                    "description": "Market"
                },
                "makerRate": {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "Maker rate"
                },
                "takerRate": {
                    "type": "integer",
                    "format": "int32",
                    "example": 20,
                    "description": "Taker rate"
                }
            },
            "description": "The data structure of user query market fee rate"
        },
        "GetUserFeeRatesV2Response": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "example": "1584354752",
                    "description": "The results returned by query user fee rates",
                    "items": {
                        "$ref": "#/definitions/FeeRate"
                    }
                }
            },
            "description": "The results returned by query user fee rates"
        },
        "ExchangeInfo": {
            "type": "object",
            "required": [
                "chainId",
                "depositAddress",
                "domainSeparator",
                "exchangeAddress",
                "onchainFees",
                "transferFees",
                "withdrawalFees"
            ],
            "properties": {
                "chainId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.ExchangeInfo.chainId"
                },
                "exchangeAddress": {
                    "type": "string",
                    "example": "0xbA1D5779131aa529F51B4B00186E9e97f3BeB854",
                    "description": "field.ExchangeInfo.exchangeAddress"
                },
                "domainSeparator": {
                    "type": "string",
                    "example": "0xbA1D5779131aa529F51B4B00186E9e97f3BeB854",
                    "description": "field.ExchangeInfo.domainSeparator"
                },
                "depositAddress": {
                    "type": "string",
                    "example": "0xbA1D5779131aa529F51B4B00186E9e97f3BeB854",
                    "description": "field.ExchangeInfo.depositAddress"
                },
                "onchainFees": {
                    "type": "array",
                    "description": "field.ExchangeInfo.onchainFees",
                    "items": {
                        "$ref": "#/definitions/FeeInfo"
                    }
                },
                "transferFees": {
                    "type": "array",
                    "description": "field.ExchangeInfo.transferFees",
                    "items": {
                        "$ref": "#/definitions/OffFeeInfo"
                    }
                },
                "withdrawalFees": {
                    "type": "array",
                    "description": "field.ExchangeInfo.OffWithdrawalFees",
                    "items": {
                        "$ref": "#/definitions/OffFeeInfo"
                    }
                }
            },
            "description": "Exchange basic info."
        },
        "FeeInfo": {
            "type": "object",
            "required": ["fee", "type"],
            "properties": {
                "type": {
                    "type": "string",
                    "example": "withdraw",
                    "description": "Fee category."
                },
                "fee": {
                    "type": "string",
                    "example": "2000000000000000",
                    "description": "Fee amount in Ether as wei."
                }
            },
            "description": "Information about fees charged by loopring exchange."
        },
        "GetExchangeInfoResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "Necessary exchange to interact with the exchange",
                    "$ref": "#/definitions/ExchangeInfo"
                }
            }
        },
        "OffFeeInfo": {
            "type": "object",
            "required": ["fee", "token"],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "ETH",
                    "description": "fee token"
                },
                "fee": {
                    "type": "string",
                    "example": "2000000000000000",
                    "description": "fee amount"
                }
            },
            "description": "Off-chain fee info charged by loopring exchange."
        },
        "AgentInfo": {
            "type": "object",
            "required": [
                "address",
                "freezeAmount",
                "symbol",
                "timestamp",
                "tokenId",
                "totalAmount"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0xABCD",
                    "description": "field.AgentInfo.address"
                },
                "tokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1,
                    "description": "field.AgentInfo.tokenId"
                },
                "symbol": {
                    "type": "string",
                    "example": "LRC",
                    "description": "field.AgentInfo.symbol"
                },
                "totalAmount": {
                    "type": "string",
                    "example": "1234",
                    "description": "field.AgentInfo.totalAmount"
                },
                "freezeAmount": {
                    "type": "string",
                    "example": "1234",
                    "description": "field.AgentInfo.freezeAmount"
                },
                "timestamp": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1234,
                    "description": "field.AgentInfo.timestamp"
                }
            },
            "description": "field.AgentInfo.description"
        },
        "GetWithdrawalAgentsResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "Necessary exchange to interact with the exchange",
                    "items": {
                        "$ref": "#/definitions/AgentInfo"
                    }
                }
            }
        },
        "WebSocket": {
            "type": "object"
        },
        "AmmMarketInfo": {
            "type": "object",
            "required": [
                "address",
                "amountPrecision",
                "domainSeparator",
                "enabled",
                "feeBips",
                "inPoolTokens",
                "market",
                "name",
                "poolTokenId",
                "pricePrecision",
                "version"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "LRC-USDT-Pool-1",
                    "description": "field.AmmMarketInfo.name"
                },
                "market": {
                    "type": "string",
                    "example": "LP-LRC-USDT",
                    "description": "field.AmmMarketInfo.market"
                },
                "address": {
                    "type": "string",
                    "example": "0xa6fa83b62b09174694EFD7EE3aE608ad478a138E",
                    "description": "field.AmmMarketInfo.address"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0",
                    "description": "field.AmmMarketInfo.version"
                },
                "domainSeparator": {
                    "type": "string",
                    "example": "0x01586e6169d659F96Fb0B8e796Ceeb548E7008e5",
                    "description": "field.AmmMarketInfo.domainSeparator"
                },
                "inPoolTokens": {
                    "type": "array",
                    "example": "[2,3,5]",
                    "description": "field.AmmMarketInfo.inPoolTokens",
                    "items": {
                        "type": "object"
                    }
                },
                "poolTokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0,
                    "description": "field.AmmMarketInfo.poolTokenId"
                },
                "feeBips": {
                    "type": "integer",
                    "format": "int32",
                    "example": 6,
                    "description": "field.AmmMarketInfo.feeBips"
                },
                "pricePrecision": {
                    "type": "integer",
                    "format": "int32",
                    "example": 6,
                    "description": "field.AmmMarketInfo.pricePrecision"
                },
                "amountPrecision": {
                    "type": "integer",
                    "format": "int32",
                    "example": 6,
                    "description": "field.AmmMarketInfo.amountPrecision"
                },
                "enabled": {
                    "type": "boolean",
                    "example": false,
                    "description": "field.AmmMarketInfo.enabled"
                }
            }
        },
        "GetAmmMarketInfoResponse": {
            "type": "object",
            "required": ["resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "type": "array",
                    "description": "field.getAmmMarketInfoResponse.data",
                    "items": {
                        "$ref": "#/definitions/AmmMarketInfo"
                    }
                }
            },
            "description": "model.getAmmMarketInfoResponse"
        },
        "AmmSnapshot": {
            "type": "object",
            "required": [
                "PoolTokenAmount",
                "poolAddress",
                "poolName",
                "poolTokenId",
                "tokenAmounts",
                "tokenIds"
            ],
            "properties": {
                "poolName": {
                    "type": "string",
                    "example": "LRC-ETH-Pool-1",
                    "description": "field.AmmSnapshot.poolName"
                },
                "poolAddress": {
                    "type": "string",
                    "example": "10",
                    "description": "field.AmmSnapshot.poolAddress"
                },
                "poolTokenId": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10,
                    "description": "field.AmmSnapshot.poolTokenId"
                },
                "PoolTokenAmount": {
                    "type": "string",
                    "example": "100",
                    "description": "field.AmmSnapshot.PoolTokenAmount"
                },
                "tokenIds": {
                    "type": "array",
                    "example": "100",
                    "description": "field.AmmSnapshot.tokenIds",
                    "items": {
                        "type": "object"
                    }
                },
                "tokenAmounts": {
                    "type": "array",
                    "example": "100",
                    "description": "field.AmmSnapshot.tokenAmounts",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "description": "model.AmmSnapshot.description"
        },
        "GetAmmSnapshotResponse": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "description": "Information returned by the API",
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "description": "field.AmmSnapshot.AmmSnapshot",
                    "$ref": "#/definitions/AmmSnapshot"
                }
            },
            "description": "model.GetAmmSnapshotResponse"
        },
        "AmmPoolExitRequest": {
            "type": "object",
            "required": [
                "burnAmount",
                "burnStorageID",
                "ecdsaSig",
                "exitMinAmounts",
                "fee",
                "owner",
                "poolAddress",
                "validUntil"
            ],
            "properties": {
                "owner": {
                    "type": "string",
                    "example": "0xe25c94ba036d91b48833acb637f719038f07372d",
                    "description": "field.AmmPoolJoinRequest.owner"
                },
                "poolAddress": {
                    "type": "string",
                    "example": "0xe25c94ba036d91b48833acb637f719038f07372d",
                    "description": "field.AmmPoolJoinRequest.poolAddress"
                },
                "burnAmount": {
                    "type": "string",
                    "example": "100000000000000",
                    "description": "field.AmmPoolExitRequest.burnAmount"
                },
                "burnStorageID": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "field.AmmPoolExitRequest.burnStorageID"
                },
                "exitMinAmounts": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "field.AmmPoolExitRequest.exitMinAmounts"
                },
                "fee": {
                    "type": "string",
                    "example": "1000000000000000000",
                    "description": "field.AmmPoolExitRequest.fee"
                },
                "validUntil": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1598431481,
                    "description": "field.AmmPoolExitRequest.validUntil"
                },
                "ecdsaSig": {
                    "type": "string",
                    "example": "0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b",
                    "description": "field.AmmPoolExitRequest.ecdsaSig"
                }
            }
        },
        "AmmTransactionData": {
            "type": "object",
            "required": [
                "ammLayerType",
                "ammPoolAddress",
                "ammPoolId",
                "blockHeight",
                "createdAt",
                "hash",
                "id",
                "lpTokenAmount",
                "lpTokenId",
                "lpTokenSymbol",
                "owner",
                "transfers",
                "txHash",
                "txStatus",
                "txType",
                "updatedAt"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "hash": {
                    "type": "string"
                },
                "txHash": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "txType": {
                    "type": "string"
                },
                "txStatus": {
                    "type": "string"
                },
                "ammLayerType": {
                    "type": "string"
                },
                "ammPoolId": {
                    "type": "integer",
                    "format": "int64"
                },
                "ammPoolAddress": {
                    "type": "string"
                },
                "lpTokenId": {
                    "type": "integer",
                    "format": "int64"
                },
                "lpTokenSymbol": {
                    "type": "string"
                },
                "lpTokenAmount": {
                    "type": "string"
                },
                "transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AmmTransferData"
                    }
                },
                "blockHeight": {
                    "type": "integer",
                    "format": "int64"
                },
                "createdAt": {
                    "type": "integer",
                    "format": "int64"
                },
                "updatedAt": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "AmmTransactionDataList": {
            "type": "object",
            "required": ["totalNum", "transactions"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AmmTransactionData"
                    }
                }
            }
        },
        "AmmTransferData": {
            "type": "object",
            "required": [
                "actualAmount",
                "amount",
                "feeAmount",
                "id",
                "tokenId",
                "tokenSymbol"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "tokenId": {
                    "type": "integer",
                    "format": "int32"
                },
                "tokenSymbol": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                },
                "actualAmount": {
                    "type": "string"
                },
                "feeAmount": {
                    "type": "string"
                }
            }
        },
        "GetAmmTransactionResponseV2": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "$ref": "#/definitions/AmmTransactionDataList"
                }
            }
        },
        "AmmTradeData": {
            "type": "object",
            "required": [
                "accountId",
                "createdAt",
                "feeAmount",
                "market",
                "orderHash",
                "price",
                "sequenceId",
                "settlementRequestId",
                "side",
                "size"
            ],
            "properties": {
                "sequenceId": {
                    "type": "integer",
                    "format": "int64"
                },
                "accountId": {
                    "type": "integer",
                    "format": "int64"
                },
                "settlementRequestId": {
                    "type": "integer",
                    "format": "int64"
                },
                "orderHash": {
                    "type": "string"
                },
                "market": {
                    "type": "string"
                },
                "side": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "feeAmount": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "AmmTradeDataList": {
            "type": "object",
            "required": ["totalNum", "trades"],
            "properties": {
                "totalNum": {
                    "type": "integer",
                    "format": "int64"
                },
                "trades": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AmmTradeData"
                    }
                }
            }
        },
        "GetAmmTradesResponseV2": {
            "type": "object",
            "required": ["data", "resultInfo"],
            "properties": {
                "resultInfo": {
                    "$ref": "#/definitions/ResultInfo"
                },
                "data": {
                    "$ref": "#/definitions/AmmTradeDataList"
                }
            }
        }
    }
}
